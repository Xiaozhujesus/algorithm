package priv.wz.greedy;

public class Greedy {
    /**
     * 贪心算法是一种算法策略，有点类似分治，只不过是从小问题开始解决，也就是最基本的情况，在算法进行的每一步
     * 选择在当前看来是最优的解，当前最优解的性质一直保持，因此当到了最后，当前的最优解就是问题的最优解
     *
     * 贪婪算法的核心思想是：
     * 局部最优选择：在每一步中，选择当前状态下最优的决策。
     * 不可回溯：一旦做出选择，就不再改变。
     * 希望导致全局最优：通过一系列局部最优选择，最终达到全局最优解。
     *
     * 缺点：
     * 局部最优不一定是全局最优：贪婪算法可能无法得到全局最优解。
     * 适用范围有限：仅适用于满足贪婪选择性质和最优子结构的问题。
     *
     * 贪婪算法：
     * 每次选择局部最优解，不回溯。
     * 不保证全局最优解。
     *
     * 动态规划：
     * 通过分解子问题，记录子问题的解，避免重复计算。
     * 保证全局最优解。
     */
}
