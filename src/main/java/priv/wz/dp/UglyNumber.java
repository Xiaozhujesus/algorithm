package priv.wz.dp;

/**
 * 给你一个整数 n ，请你找出并返回第 n 个 丑数 。
 *
 * 丑数 就是只包含质因数2、3、5的正整数。
 *
 * 示例 1：
 * 输入：n = 10
 * 输出：12
 * 解释：[1, 2, 3, 4, 5, 6, 8, 9, 10, 12] 是由前 10 个丑数组成的序列。
 *
 * 示例 2：
 * 输入：n = 1
 * 输出：1
 * 解释：1 通常被视为丑数。
 */
public class UglyNumber {
    public int nthUglyNumber(int n) {
        int[] dp = new int[n + 1];
        dp[1] = 1;
        int p2 = 1, p3 = 1, p5 = 1;
        for (int i = 2; i <= n; i++) {
            int num2 = dp[p2] * 2, num3 = dp[p3] * 3, num5 = dp[p5] * 5;
            dp[i] = Math.min(Math.min(num2, num3), num5);
            if (dp[i] == num2) {
                p2++;
            }
            if (dp[i] == num3) {
                p3++;
            }
            if (dp[i] == num5) {
                p5++;
            }
        }
        return dp[n];
    }

    /**
     * 根据丑数定义，丑数序列后面的丑数一定是前面丑数乘以2、3、5得到，问题是如何确定下一个最小丑数？
     * 丑数序列中的每个数乘以2、3、5都应该在丑数序列中，所以序列中的每个数都应该乘以2、3、5一次，且仅一次
     * 所以应该有3个指针分别记录序列中当前应该乘以2、3、5的位置
     * 然后让这3个指针从头开始，每次找最小的乘积就是序列中下一个值，然后对应序列已经乘过的往前移动一下
     */
}
