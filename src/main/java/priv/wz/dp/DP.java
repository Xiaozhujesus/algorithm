package priv.wz.dp;

public class DP {
    /**
     * 动态规划（Dynamic Programming，DP）是运筹学中的一个主要方法和工具，用于解决多阶段决策问题，
     * 通过将问题分解为更小的子问题逐一解决。DP 不一定用来求最优解问题，最优并不是 DP 要求的属性，
     * Fabonacci 数列问题的 DP 解法就没有最优解属性。
     *
     * 动态规划的关键是将问题分解，找出可以解决问题的基本状态。这些状态也许是问题的直接解答，
     * 也许不是问题的直接解答，需要由基本状态计算出问题的解；然后再找状态转移方程，也就是不同规模
     * 问题间的这些基本状态间的递推关系，利用现有子问题的状态，计算得到规模更大问题的状态；
     * 这里如果无法利用子问题的状态，就不是 DP。因为如果可以不使用子问题的状态直接得到当前问题的解，
     * 就不需要浪费资源计算子问题。如果不用子问题，就没有状态转移，就不是 DP。
     *
     * DP 的关键是问题分析：如何找出可以递推的，同时可以解答问题的基本状态；状态找对了，问题迎刃而解；
     * 这也是 DP 具有挑战的地方，因为不同的问题，分解方法不同；至于最优子结构，可以不是 DP 方法的属性，而是问题本身的属性；
     * DP 方法本身的属性是可转换的子结构，只不过有些问题要求的是最优解，导致了子结构是最优的
     *
     * 每个阶段只有一个状态->递推；
     * 每个阶段的最优状态都是由上一个阶段的最优状态得到的->贪心；
     * 每个阶段的状态是由之前所有阶段的状态的组合得到的->搜索；
     * 每个阶段的状态可以从之前某些阶段的某些状态得到而不管之前的状态是如何得到的->动态规划
     *
     * 问题是有结构的，比如 CanJump、ClimbStairs 问题是一维的，CanPartition、CoinChange 是二维的，
     * 更高维度的问题都可以使用 DP 打表
     *
     */
}
